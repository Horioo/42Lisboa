Verificar o que faz cada funcao que podemos utilizar:

	perror:
		Escreve uma mensagem de error para o stderror seguida de um colon ":" e um " "

		Syntax:  void perror(const char *s);

	access:
		Verifica se o processo tem acesso ao ficheiro (filename)

		Syntax: int access(const char *pathname, int mode);

		mode - 
			F_OK = verifica se o ficheiro existe
			R_OK = Verifica se o ficheiro existe e da lhe permissoes de Read 
			W_OK = Verifica se o ficheiro existe e da lhe permissoes de Write
			X_OK = Verifica se o ficheiro existe e da lhe permissoes de Execute

	dup:
		Cria a copia de um file descriptor, utilizando o numero mais pequeno nao usado para o novo fd

		Syntax: int dup(int oldfd);
	
	dup2:
		Igual ao dup() mas em vez de utilizar o numero mais pequeno usa o numero fornecido pelo user

		Syntax: int dup2(int oldfd, int newfd);


	execve: 
		Executa o programa (pathname), ira substituir o programa que esta a correr atualmente

		Syntax: int execve(const char *pathname, char *const _Nullable argv[], char *const _Nullable envp[]);
	
	fork:
		Cria um novo processo em Linux, chamado Child Process, que corre ao mesmo tempo que o Parent Process, depois de criar o Child ambos os projetos irao executar a proxima instrucao
		O Child process usa os mesmos open files que o Parent Process
		Nao recebe parametros e retorna um int - 

		Negative value = Creation of child process was unsuccessful
		Zero = Returned to the newly created child process
		Positive value = Returned to Parent or caller, the returned value contains the Process ID

		Syntax: int fork()

	pipe:
		Cria uma conexao entre dois processos
		O standard output de um processo transforma-se no standard input do segundo processo

		Syntax : int pipe(int fds[2]);
		fd[0] = file descriptor para o read pipe
		fd[1] = file descriptor para o write pipe
		
	unlink:
		Apaga um nome do filesystem
		Se o nome for o ultimo link para um ficheiro e nenhum processor tiver o ficheiro aberto entao o unlink ira apagar o ficheiro e libertar a memoria ocupada pelo ficheiro

		Syntax: int unlink(const char *pathname);

	wait:
		Suspende a execucao de uma Thread ate que uma das childrens seja terminada

		Syntax: pid_t wait(int *_Nullable wstatus);

	waitpid:
		Suspende a execucao de uma Thread ate que a children especificada por pid tenha o seu state alterado

		Syntax: pid_t waitpid(pid_t pid, int *_Nullable wstatus, int options);